import { SyntheticEvent, useEffect, useState } from "react";
import { w3cwebsocket as W3CWebSocket } from "websocket";
import { useLocation } from "react-router-dom";
import Footer from "./components/Footer";

type messageType = {
	key: number;
	text: string;
	author: string;
};

const SimpleChat = () => {
	const [input, setInput] = useState("");
	const [disabled, setDisabled] = useState(false);
	const [messages, setMessages] = useState([
		{
			key: 2,
			text: "Any message in here will be lost upon refresh as it is not linked to a database",
			author: "AUTOGENERATED",
		},
		{ key: 1, text: "Hello Welcome to a simple demo of this chat webapp", author: "AUTOGENERATED" },
	]);
	const [keyNmbr, setKeyNmbr] = useState(3);
	const [client, setClient] = useState<W3CWebSocket>();
	const search = useLocation().search;
	const displayName = new URLSearchParams(search).get("display_name");

	const updateMessages = (message: messageType) => {
		setMessages((prevMessages) => [message, ...prevMessages]);
		setKeyNmbr((prev) => prev + 1);
	};

	if (client) {
		client.onopen = () => {
			console.log("OPEN, WebSocket Client Connected");
		};
		client.onmessage = (message) => {
			const data = JSON.parse(message.data as string);
			const messageData = { key: keyNmbr, text: data.message, author: data.from };
			updateMessages(messageData);
		};
		client.onerror = (error) => {
			console.error("error:", error);
		};
		client.onclose = (message) => {
			console.log("close:", message);
		};
	}

	const handleEnable = () => {
		setTimeout(() => {
			console.log("AntiSpam!");
			setDisabled((prev) => !prev);
		}, 2000);
	};

	const handleSubmit = (e: SyntheticEvent) => {
		e.preventDefault();
		if (input.length > 0) {
			client!.send(JSON.stringify({ message: input, from: displayName }));
			setInput("");
			setDisabled((prev) => !prev);
			handleEnable();
		}
	};

	const handleClose = () => {
		client!.close();
	};

	useEffect(() => {
		const client = new W3CWebSocket("ws://127.0.0.1:8000/ws/chat/public/publicroom/");
		setClient(client);
		// eslint-disable-next-line
	}, []);

	return (
		<div>
			<section className='text-gray-600 body-font'>
				<div className='container mx-auto flex flex-col px-5 sm:py-24 py-5 justify-center items-center'>
					<div className='text-left flex justify-start '>
						<h2 className='text-3xl'>Simple Public Chat!</h2>
					</div>
					<div className='w-full flex mb-16 flex-col'>
						<div className=' bg-purple-200 border-2 border-black flex-col-reverse rounded-lg overflow-y-auto w-full flex h-96 pb-2'>
							{messages.map((message: messageType) => (
								<div
									key={message.key}
									className={`flex flex-grow-1 ${
										message.author === displayName ? "justify-end " : "justify-start"
									}`}>
									<div
										className={`mx-2 my-1 items-start px-2 py-3 rounded-md border max-w-sm sm:max-w-lg flex-grow-0 ${
											message.author === displayName
												? "bg-gray-200 border-gray-400"
												: "bg-gray-100"
										} border-gray-300  min-w-0 text-left shadow-xs`}>
										<p className='text-xs text-gray-500'>
											{message.author !== displayName && "From: " + message.author}
										</p>
										<p className='text-black'>{message.text}</p>
									</div>
								</div>
							))}
						</div>
						<form onSubmit={handleSubmit} className='flex w-full justify-center items-end'>
							<div className='relative mr-4 lg:w-full xl:w-1/2 w-2/4 md:w-full text-left mt-9'>
								<input
									type='text'
									id='hero-field'
									name='hero-field'
									className='w-full bg-gray-100 bg-opacity-50 rounded focus:ring-2 focus:ring-green-200 focus:bg-transparent border border-gray-300 focus:border-green-500 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
									value={input}
									onChange={(e) => setInput(e.target.value)}
									disabled={disabled}
								/>
							</div>
							<button
								type='submit'
								disabled={disabled}
								className='inline-flex text-white bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg'>
								{">"}
							</button>
							<button
								onClick={() => handleClose()}
								className='inline-flex text-white mx-2 bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg'>
								Close
							</button>
						</form>
					</div>
				</div>
			</section>
			<Footer />
		</div>
	);
};

export default SimpleChat;
